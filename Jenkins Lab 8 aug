Jenkins lab day 1 8th Aug
=====================================================================================================================


SOURCE MACHINE: Ubuntu   Reference: https://www.jenkins.io/doc/book/installing/linux/#debianubuntu  Jenkins Version: Jenkins 2.346.2
 - apt-get update
 - We need Java as pre requirement, so run cmd : apt install default-jdk
 - Run following cmd from the URL:
 
 -   curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
- sudo apt-get update
- sudo apt-get install jenkins

Open Jenkins box on IP:8080

Admin Password:  open server file:     cat /var/lib/jenkins/secrets/initialAdminPassword  

After login >> select install suggested plugins --> if its doen't work just restart app : systemctl restart jenkins
=====================================================================================================================


Manage jenkins --> at the left bar to install plugins , manage users

Jenkins --> new item --> Freestyle proj --> name of job 

=====================================================================================================================

::::::::::Terms::::::::::

Discard old build --> when we create new proj in java it creates jar file so here we can select how many jar/var we want to save ( to save space)
we can select days: like 4 days so it will save 4 days file
Max build: 100 then 100 builds max in 4 days.

The project is paramterized:   Before this project executed u want to pass some parameter : like file parameter, multi-line parameter, cred paramater
                                API parameter, choice parameter -- helps u to skip stages in pipeline
                                
Throttle build:  Enforce minimum time in between builds,  Ex: second build shud be push after some gap. like 1 hr, 1 day, 1 month

Execute concurrent build: u can create concurrent builds, multipe developers ( so require caution) [ By default Jenkins use pipeline to second build execute
only after first build.

Trigger build: One job trigger other build

Trigger builds remotely: One Jenikis trigger job remotely on other offshore jenkins machine

Build after other proj build: run new proj only once first proj complete

Build periodically: Schedule tasks, run job timely  H/15 * * * * (run job every 15min)

Poll SCM:  SCM(source code management) it check src code as per time set and if there is change then it builds otherwise it will skip.  
H/15 * * * * (run job every 15min) do not consume resources like Build periodically, its better than Build periodically.

We can also use hook of git hub: hook pushes new code to build without requirement of poll SCM and Build periodically

Delete workspace before build start:  Jenkins creates folder before it creates job. so u can choose to delete folder for fress installation but
it will consume more time.   /var/lib/jenkins directory 

Terminate build if it stuck:   close build after 3min if it stuck

=====================================================================================================================

Pipeline in Jenkins use --> Jenkinsfile. Jenkins use their own domain specfic language means their backend lang is different but Jenkins has its own GUI.
Jenkins files translate into groovy language but we dont need to worry.

=====================================================================================================================


IN the LAB we use following cmd:

git config --global user.name "Rohit"
git config --global user.email "rrrohitraj54@gmail.com"
git clone https://github.com/gopal1409/springboot-chat-app.git
cd springboot-chat-app/
rm -rf .git   (.git basically removes all versioning details)
git init
git add .
git commit -m "my spring app"
git log


Create new repositry in git >> create ssh key in machine and add in git under setting (ssh and gpg key) >> in the new reposiroty click on ssh and
copy git remote command and paste into machine.
last cmd is >>  git push -u origin master

So I sucesfully pushed this repo : https://github.com/rohitraj1104/lab


